// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        fx0: fx0 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX0";
            #binding-cells = <0>;
            bindings = <&kp F10>, <&kp F20>;
        };

        fx1: fx1 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX1";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F11>, <&kp F21>;
        };

        fx2: fx2 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX2";
            #binding-cells = <0>;
            bindings = <&kp F2>, <&kp F12>, <&kp F22>;
        };

        fx3: fx3 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX3";
            #binding-cells = <0>;
            bindings = <&kp F3>, <&kp F13>, <&kp F23>;
        };

        fx4: fx4 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX4";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp F14>, <&kp F24>;
        };

        fx5: fx5 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX5";
            #binding-cells = <0>;
            bindings = <&kp F5>, <&kp F15>;
        };

        fx6: fx6 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX6";
            #binding-cells = <0>;
            bindings = <&kp F6>, <&kp F16>;
        };

        fx7: fx7 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX7";
            #binding-cells = <0>;
            bindings = <&kp F7>, <&kp F17>;
        };

        fx8: fx8 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX8";
            #binding-cells = <0>;
            bindings = <&kp F8>, <&kp F18>;
        };

        fx9: fx9 {
            compatible = "zmk,behavior-tap-dance";
            label = "FX9";
            #binding-cells = <0>;
            bindings = <&kp F9>, <&kp F19>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };

        dasherscore: dasherscore {
            compatible = "zmk,behavior-tap-dance";
            label = "DASHERSCORE";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        plus_eq: plus_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "PLUS_EQ";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        grave_tilde: grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_TILDE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        pipe_slash: pipe_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "PIPE_SLASH";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BSLH>;
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <22 23>;
            layers = <0 1 2>;
        };

        backspace_wd {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <23 22 21>;
            layers = <0 1 2>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <20 21 22 23>;
            layers = <0 1 2>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <24 23>;
            layers = <0 1 2>;
        };

        delete_wd {
            bindings = <&kp LC(DELETE)>;
            key-positions = <24 23 22>;
            layers = <0 1 2>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
            layers = <0 1 2>;
        };

        copy {
            bindings = <&kp LC(INSERT)>;
            key-positions = <26 27>;
            layers = <0 1 2>;
        };

        paste {
            bindings = <&kp LS(INSERT)>;
            key-positions = <26 27 28>;
            layers = <0 1 2>;
        };

        paste_h {
            bindings = <&kp LG(V)>;
            key-positions = <26 27 28 29>;
            layers = <0 1 2>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <33 16>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <33 17>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <33 18>;
        };

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <33 19>;
        };

        https {
            bindings = <&https>;
            key-positions = <29 33>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        https: https {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH>;
            label = "HTTPS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &ht LGUI D  &ht LALT R  &ht LCTRL W  &kp B    &kp J  &ht RCTRL F  &ht RALT U  &ht RGUI P  &kp SQT
&kp A  &kp S       &kp H       &kp T        &kp G    &kp Y  &kp N        &kp E       &kp O       &kp I
&kp Z  &kp X       &kp M       &kp C        &kp V    &kp K  &kp L        &kp COMMA   &kp DOT     &kp FSLH
                               &kp LSHFT    &mo 1    &mo 2  &kp SPACE
            >;
        };

        num_sym {
            bindings = <
&kp EXCL  &mt LEFT_GUI AT  &mt LALT LBRC         &mt LCTRL RBRC         &kp PRCNT    &kp PLUS    &mt RCTRL N7  &mt RALT N8  &mt RIGHT_GUI N9  &kp ASTRK
&kp HASH  &kp DLLR         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE     &kp PERIOD  &kp N4        &kp N5       &kp N6            &kp N0
&kp AMPS  &kp ASTRK        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BSLH     &kp MINUS   &kp N1        &kp N2       &kp N3            &kp SLASH
                                                 &trans                 &trans       &trans      &trans
            >;
        };

        nav {
            bindings = <
&none  &kp LGUI      &kp LALT      &kp LCTRL   &none     &none    &kp HOME   &kp UP    &kp END    &none
&none  &kp C_PREV    &kp C_NEXT    &kp C_PLAY  &none     &kp TAB  &kp LEFT   &kp DOWN  &kp RIGHT  &kp RET
&none  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE  &none     &none    &kp PG_UP  &none     &kp PG_DN  &none
                                   &trans      &trans    &trans   &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &kp LGUI  &kp LALT  &kp LCTRL   &bt BT_SEL 0    &none   &fx7    &fx8  &fx0  &sys_reset
&none        &none     &none     &none       &bt BT_SEL 1    &none   &fx4    &fx5  &fx6  &fx0
&bootloader  &none     &none     &bt BT_CLR  &bt BT_SEL 2    &none   &fx1    &fx2  &fx3  &bootloader
                                 &trans      &trans          &trans  &trans
            >;
        };
    };
};
